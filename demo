#!/usr/bin/env julia

using Pkg
Pkg.activate(normpath(@__DIR__))

using RayTracer
import Crayons # enables colorful and expressive terminal output

# On-Off Tracing Functions 
function OnOff_Tracing(world::World, ray::Ray)
    isnothing(ray_intersection(world, ray)) ? RGB(0.0, 0.0, 0.0) : RGB(1.0, 1.0, 1.0)
end

function main()
    try
        # HdrImage
        aspect_ratio = 2.0
        width = 1000
        height = Int(width/aspect_ratio)
        img = HdrImage(width, height)
        
        # Cameras
        aspect_ratio = 2.0
        distance = 1.0
        cameras = [
                OrthogonalCamera(aspect_ratio,translation(Vec(-2.0, 0.0, 0.0))), 
                PerspectiveCamera(distance,aspect_ratio,translation(Vec(-2.0, 0.0, 0.0)))
                ]
        names = ["demo_orthogonal", "demo_perspective"]
        # Image Generation
        for (cam, name) in zip(cameras, names)
            # ImageTracer
            tracer = ImageTracer(img, cam)
            # World
            scale = scaling(0.1, 0.1, 0.1)
            sphere_list = [
                            Sphere(translation(Vec(-0.5,-0.5,-0.5))*scale),
                            Sphere(translation(Vec(-0.5,-0.5, 0.5))*scale),
                            Sphere(translation(Vec(-0.5, 0.5,-0.5))*scale),
                            Sphere(translation(Vec( 0.5,-0.5,-0.5))*scale),
                            Sphere(translation(Vec(-0.5, 0.5, 0.5))*scale),
                            Sphere(translation(Vec( 0.5, 0.5,-0.5))*scale),
                            Sphere(translation(Vec( 0.5,-0.5, 0.5))*scale),
                            Sphere(translation(Vec( 0.5, 0.5, 0.5))*scale),
                            Sphere(translation(Vec( 0.0, 0.0, -0.5))*scale),
                            Sphere(translation(Vec( 0.0, 0.5, 0.0))*scale)
                        ]

            world = World(sphere_list)

            # On-Off Tracing
            f = ray -> OnOff_Tracing(world, ray)

            fire_all_rays!(tracer, f)

            # PFM Image saving
            write(name*".PFM", img)

            # LDR Image saving (default png)
            write_ldr_image(img, name*".png")
        end

    catch e
        # Define colors for the error message
        red_bold = Crayons.crayon"bold red"  # Bold red text
        reset = Crayons.crayon"reset"        # Reset color to default
        
        # Print the formatted error message
        println(string(red_bold) * "ERROR " * string(reset), "$(typeof(e)): $(e.msg)")

    end
end

main()
