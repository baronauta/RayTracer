#!/usr/bin/env julia

#     __________________________________________________________
#
#     LICENSE NOTICE: European Union Public Licence (EUPL) v.1.2
#     __________________________________________________________
#
#   This file is licensed under the European Union Public Licence (EUPL), version 1.2.
#
#   You are free to use, modify, and distribute this software under the conditions
#   of the EUPL v.1.2, as published by the European Commission.
#
#   Obligations include:
#     - Retaining this notice and the licence terms
#     - Providing access to the source code
#     - Distributing derivative works under the same or a compatible licence
#
#   Full licence text: see the LICENSE file or visit https://eupl.eu
#
#   Disclaimer:
#     Unless required by applicable law or agreed to in writing,
#     this software is provided "AS IS", without warranties or conditions
#     of any kind, either express or implied.


#❗For name generation logic, see misc.jl

using Pkg
Pkg.activate(normpath(@__DIR__))

using RayTracer
using Comonicon



# ─────────────────────────────────────────────────────────────
# PATH TRACER
# ─────────────────────────────────────────────────────────────

"""
A physically-based renderer that simulates realistic lighting, including global illumination, 
soft shadows, and reflections.

# Args

- `scenefile`: Path to the scene description file.
- `width`: Width of the output image in pixels.
- `height`: Height of the output image in pixels.

# Options

- `--output-name=<String>`: 
    Custom base name for the output files.
    If omitted, a timestamp-based name is used (e.g., `pthtrc_2025-06-07_135023`).
    All output files are saved inside a folder named `render_<scene_name>/`.

- `--extension=<String>`: 
    Format of the tone-mapped output image: `.png,` `.jpeg`, or `.tif.
    Default is `.png.`.

- `--angle=<float>`:
    Overrides the `angle` variable in the scene’s text-based description file if it is present. 
    If not specified, the value from the scene file is used by default. 
    This option is primarily used to adjust camera rotation for quick previews without modifying the scene file.
    
- `--n-rays=<Integer>`: 
    Number of rays cast per pixel. 
    Higher values improve quality but increase render time.
    Default: `5`.

- `--max-depth=<Integer>`:
    Maximum recursion depth for ray bounces (reflections/refractions).
    Increasing this allows capturing more indirect lighting and reflections, 
    but causes exponentially longer rendering times.
    Default: `5`.

- `--russian-roulette-limit=<Integer>`: 
    Recursion depth after which Russian roulette termination begins to probabilistically end ray paths, 
    reducing computation while minimizing bias.
    Default: `3`.

"""
Comonicon.@cast function pathtracer(
    scenefile::String, 
    width::Int, 
    height::Int; 
    output_name::String="",
    extension::String = "", # useful fix-it although without output name (so timestamp.extension)
    angle::Union{Float64, Nothing}=nothing,
    n_rays::Int=5,
    max_depth::Int=5,
    russian_roulette_limit::Int=3,
    )

    try
        print_welcome()
        RayTracer.check_name(scenefile, [".txt"])
        println("📂 Preparing to parse the scene...")
        # Determine the correct output file extension and construct output paths.
        # This handles cases where the user may or may not specify output name and/or extension.
        # If no output name is given, a timestamped name inside a folder named after the scene is created.
        extension, ldr_path, pfm_path = RayTracer.choose_name(output_name, extension, scenefile, "pthtrc")

        # check correct output extension
        if !(extension in SUPPORTED_EXTS)
            throw(ExtensionError("unsupported file extension. Please use one of: $(join(SUPPORTED_EXTS, ", "))"))
        end

        aspect_ratio = width/height
        if !isnothing(angle)
            external_variables = Dict(
                "angle" => angle,
                )
        else
            external_variables = Dict{String, Float64}()
        end

        # Parse the scene from text file
        scene = open(scenefile, "r") do io
            instream = RayTracer.InputStream(io, scenefile)
            RayTracer.parse_scene(instream, aspect_ratio; external_variables)
        end
        println("✓ Scene parsing completed.")

        println("🖼️  Setting up the image canvas and camera...")
        # Prepare the canva to draw on
        img = HdrImage(width, height)
        # Prepare the environment made of the canva and the observer
        tracer = ImageTracer(img, scene.camera)
        println("✓ Canvas and camera setup completed.")
        
        println("🚀 Starting ray tracing (this may take a while)...\n")
        # RayTracing algorithm that need as input ...
        pcg = PCG()
        f =
            ray -> path_tracer(
                scene.world,
                ray,
                pcg;
                bkg_color = BLACK,
                n_rays = n_rays,
                max_depth = max_depth,
                russian_roulette_limit = russian_roulette_limit,
            )


        RayTracer.fire_all_rays!(tracer, f; progress_flag = true)
        

        write(pfm_path, img)
        
        # Basic tone mapping
        println("\n\nApplying basic tone mapping...\n")
        RayTracer.tonemapping!(img)
        RayTracer.write_ldr_image(ldr_path, img)

        println("✅ Rendering completed successfully. Output files:")
        println("  • Tone-mapped image ($extension): $ldr_path")
        println("  • High dynamic range image (.pfm): $pfm_path\n")

    catch e
        if isa(e, CustomException)
            println(e)
        else
            rethrow()
        end
    end
end



# ─────────────────────────────────────────────────────────────
# FLAT TRACER
# ─────────────────────────────────────────────────────────────

"""
A fast, non-photorealistic renderer that returns the surface color and emitted light at the ray intersection. It ignores lighting, shadows, and reflections.  
Useful for quick previews, geometry debugging, and visualizing base materials.

# Args

- `scenefile`: Path to the scene description file.
- `width`: Width of the output image in pixels.
- `height`: Height of the output image in pixels.

# Options

- `--output-name=<String>`: 
    Custom base name for the output files.
    If omitted, a timestamp-based name is used (e.g., `flttrc_2025-06-07_135023`).
    All output files are saved inside a folder named `render_<scene_name>/`.

- `--extension=<String>`: 
    Format of the tone-mapped output image: `.png,` `.jpeg`, or `.tif.
    Default is `.png.`.

- `--angle=<float>`:
    Overrides the `angle` variable in the scene’s text-based description file if it is present. 
    If not specified, the value from the scene file is used by default. 
    This option is primarily used to adjust camera rotation for quick previews without modifying the scene file.
"""
Comonicon.@cast function flattracer(
    scenefile, 
    width, 
    height; 
    output_name::String="",
    extension::String = "",
    angle::Union{Float64, Nothing}=nothing,
    )

    try
        print_welcome()
        RayTracer.check_name(scenefile, [".txt"])
        println("📂 Preparing to parse the scene...")
        # Determine the correct output file extension and construct output paths.
        # This handles cases where the user may or may not specify output name and/or extension.
        # If no output name is given, a timestamped name inside a folder named after the scene is created.
        extension, ldr_path, pfm_path = RayTracer.choose_name(output_name, extension, scenefile, "flttrc")

        # check correct output extension
        if !(extension in SUPPORTED_EXTS)
            throw(ExtensionError("unsupported file extension. Please use one of: $(join(SUPPORTED_EXTS, ", "))"))
        end

        # convert width e height to Int
        width = parse(Int, width)
        height = parse(Int, height)
        # check if there are variables passed from outside (e.g. angle, calculate aspect_ratio)
        aspect_ratio = width/height
        if !isnothing(angle)
            external_variables = Dict(
                "angle" => angle,
                )
        else
            external_variables = Dict{String, Float64}()
        end

        # Parse the scene from text file
        scene = open(scenefile, "r") do io
            instream = RayTracer.InputStream(io, scenefile)
            RayTracer.parse_scene(instream, aspect_ratio; external_variables)
        end
        println("✓ Scene parsing completed.")

        println("🖼️  Setting up the image canvas and camera...")
        # Prepare the canva to draw on
        img = HdrImage(width, height)
        # Prepare the environment made of the canva and the observer
        tracer = ImageTracer(img, scene.camera)
        println("✓ Canvas and camera setup completed.")
        
        println("🚀 Starting ray tracing (this may take a while)...\n")
        # RayTracing algorithm that need as input ...
        f =
            ray -> flat_tracer(
                scene.world,
                ray;
                bkg_color = BLACK,
            )


        RayTracer.fire_all_rays!(tracer, f; progress_flag = true)
        println("\n")

        write(pfm_path, img)
        
        # Basic tone mapping
        println("\n\nApplying basic tone mapping...\n")
        RayTracer.tonemapping!(img)
        RayTracer.write_ldr_image(ldr_path, img)

        println("✅ Rendering completed successfully. Output files:")
        println("  • Tone-mapped image ($extension): $ldr_path")
        println("  • High dynamic range image (.pfm): $pfm_path\n")

    catch e
        if isa(e, CustomException)
            println(e)
        else
            rethrow()
        end
    end
end



# ─────────────────────────────────────────────────────────────
# ON-OFF TRACER
# ─────────────────────────────────────────────────────────────

"""
A minimal tracer that detects ray-object intersections only, without computing lighting or color.
Returns white for hits and black for misses. 
Useful for visibility checks and fast silhouette previews.

# Args

- `scenefile`: Path to the scene description file.
- `width`: Width of the output image in pixels.
- `height`: Height of the output image in pixels.

# Options

- `--output-name=<String>`: 
    Custom base name for the output files.
    If omitted, a timestamp-based name is used (e.g., `onofftrc_2025-06-07_135023`).
    All output files are saved inside a folder named `render_<scene_name>/`.

- `--extension=<String>`: 
    Format of the tone-mapped output image: `.png,` `.jpeg`, or `.tif.
    Default is `.png.`.

- `--angle=<float>`:
    Overrides the `angle` variable in the scene’s text-based description file if it is present. 
    If not specified, the value from the scene file is used by default. 
    This option is primarily used to adjust camera rotation for quick previews without modifying the scene file.   
"""
Comonicon.@cast function onofftracer(
    scenefile::String, 
    width::Int, 
    height::Int; 
    output_name::String="",
    extension::String = "",
    angle::Union{Float64, Nothing}=nothing,
    )

    try
        print_welcome()
        RayTracer.check_name(scenefile, [".txt"])
        println("📂 Preparing to parse the scene...")
        # Determine the correct output file extension and construct output paths.
        # This handles cases where the user may or may not specify output name and/or extension.
        # If no output name is given, a timestamped name inside a folder named after the scene is created.
        extension, ldr_path, pfm_path = RayTracer.choose_name(output_name, extension, scenefile, "onofftrc")

        # check correct output extension
        if !(extension in SUPPORTED_EXTS)
            throw(ExtensionError("unsupported file extension. Please use one of: $(join(SUPPORTED_EXTS, ", "))"))
        end

        # check if there are variables passed from outside (e.g. angle, calculate aspect_ratio)
        aspect_ratio = width/height
        if !isnothing(angle)
            external_variables = Dict(
                "angle" => angle,
                )
        else
            external_variables = Dict{String, Float64}()
        end

        # Parse the scene from text file
        scene = open(scenefile, "r") do io
            instream = RayTracer.InputStream(io, scenefile)
            RayTracer.parse_scene(instream, aspect_ratio; external_variables)
        end
        println("✓ Scene parsing completed.")

        println("🖼️  Setting up the image canvas and camera...")
        # Prepare the canva to draw on
        img = HdrImage(width, height)
        # Prepare the environment made of the canva and the observer
        tracer = ImageTracer(img, scene.camera)
        println("✓ Canvas and camera setup completed.")
        
        println("🚀 Starting ray tracing (this may take a while)...\n")
        # RayTracing algorithm that need as input ...
        f =
            ray -> onoff_tracer(
                scene.world,
                ray;
                bkg_color = BLACK,
            )


        RayTracer.fire_all_rays!(tracer, f; progress_flag = true)
        println("\n")

        write(pfm_path, img)
        
        # Basic tone mapping
        println("\n\nApplying basic tone mapping...\n")
        RayTracer.tonemapping!(img)
        RayTracer.write_ldr_image(ldr_path, img)

        println("✅ Rendering completed successfully. Output files:")
        println("  • Tone-mapped image ($extension): $ldr_path")
        println("  • High dynamic range image (.pfm): $pfm_path\n")

    catch e
        if isa(e, CustomException)
            println(e)
        else
            rethrow()
        end
    end
end



# ─────────────────────────────────────────────────────────────
# TONEMAPPING
# ─────────────────────────────────────────────────────────────

"""
Perform tone mapping on an HDR image loaded from a PFM file, then save it as an LDR image.

# Args

- `input_file`: Path to the input HDR image file (must have a `.pfm` extension).

# Options
- `--output-name=<String>`: Custom name for the output tone-mapped image (default: auto-generated from parameters).
- `--out-ext=<String>`: Desired file extension for the output LDR image (e.g., ".png", ".jpg").
                        Defaults to ".png".
- `--mean=<String>`: Method to compute the luminosity mean during normalization. Defaults use "max_min" method.
- `--weights=<String>`: Weights for luminosity when mean=weighted. Format:< "[w1, w2, w3]" >.
- `--a=<Float64>`: A scaling factor applied during image normalization. Defaults to 1.0.
- `--gamma=<Float64>`: The gamma correction value applied when writing the LDR image. Defaults to 1.0.
"""
Comonicon.@cast function tonemapping(
    input_file;
    output_name::String="",
    out_ext::String = "",
    mean::String="max_min",
    weights::String="[]",  # default to empty
    a::Float64 = 1.,
    gamma::Float64=1.,
)
    try
        print_welcome()
        # Check extension
        println("Reading .pfm image...")
        RayTracer.check_name(input_file, [".pfm"])

        (weights=="[]") ? (weights = nothing) : (weights = parse.(Float64, strip.(split(strip(weights, ['[', ']']), ","))))
        
        println("🖼️  Applying tone mapping...")
        img = RayTracer.read_pfm_image(input_file)
        RayTracer.tonemapping!(
            img;
            mean_type = mean,
            weights = weights,
            a = a
        )

        # Create the default name (summarizing params, see misc.jl)
        base_output_name = if isempty(output_name)
            # Get filename without its original extension
            RayTracer.tonemapping_name(
                splitext(input_file)[1],
                mean,
                weights,
                a,
                gamma,
            )
        else
            splitext(output_name)[1] # Get output_name without its original extension
        end
        
        extension = RayTracer.choose_ext(output_name, out_ext)

        if !(extension in SUPPORTED_EXTS)
            throw(ExtensionError("unsupported file extension. Please use one of: $(join(SUPPORTED_EXTS, ", "))"))
        end
        newfilename = base_output_name * extension
        @info "Saving image to disk...\n"
        RayTracer.write_ldr_image(newfilename, img; gamma = gamma)
        println("\n✅ Tone mapping completed successfully. Output file:")
        println("  • $newfilename")
    catch e
        if isa(e, CustomException)
            println(e)
        else
            rethrow()
        end
    end
end

# Use a single @main somewhere to define the entry.
# Leave @main empty; it just activates the CLI parser and dispatcher.
Comonicon.@main