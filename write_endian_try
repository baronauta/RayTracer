#!/usr/bin/env julia

using Pkg
Pkg.activate(normpath(@__DIR__))

using RayTracer

function main()
    # This is the content of "reference_le.pfm" (little-endian file)
    LE_REFERENCE_BYTES = UInt8[
    0x50, 0x46, 0x0a, 0x33, 0x20, 0x32, 0x0a, 0x2d, 0x31, 0x2e, 0x30, 0x0a,
    0x00, 0x00, 0xc8, 0x42, 0x00, 0x00, 0x48, 0x43, 0x00, 0x00, 0x96, 0x43,
    0x00, 0x00, 0xc8, 0x43, 0x00, 0x00, 0xfa, 0x43, 0x00, 0x00, 0x16, 0x44,
    0x00, 0x00, 0x2f, 0x44, 0x00, 0x00, 0x48, 0x44, 0x00, 0x00, 0x61, 0x44,
    0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0xa0, 0x41, 0x00, 0x00, 0xf0, 0x41,
    0x00, 0x00, 0x20, 0x42, 0x00, 0x00, 0x48, 0x42, 0x00, 0x00, 0x70, 0x42,
    0x00, 0x00, 0x8c, 0x42, 0x00, 0x00, 0xa0, 0x42, 0x00, 0x00, 0xb4, 0x42
    ]

    # This is the content of "reference_be.pfm" (big-endian file)
    BE_REFERENCE_BYTES = UInt8[
    0x50, 0x46, 0x0a, 0x33, 0x20, 0x32, 0x0a, 0x31, 0x2e, 0x30, 0x0a, 0x42,
    0xc8, 0x00, 0x00, 0x43, 0x48, 0x00, 0x00, 0x43, 0x96, 0x00, 0x00, 0x43,
    0xc8, 0x00, 0x00, 0x43, 0xfa, 0x00, 0x00, 0x44, 0x16, 0x00, 0x00, 0x44,
    0x2f, 0x00, 0x00, 0x44, 0x48, 0x00, 0x00, 0x44, 0x61, 0x00, 0x00, 0x41,
    0x20, 0x00, 0x00, 0x41, 0xa0, 0x00, 0x00, 0x41, 0xf0, 0x00, 0x00, 0x42,
    0x20, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x42, 0x70, 0x00, 0x00, 0x42,
    0x8c, 0x00, 0x00, 0x42, 0xa0, 0x00, 0x00, 0x42, 0xb4, 0x00, 0x00
    ]
    println("\n")
    RayTracer.greet()
    println("\nThis is a simple file to test write functions")
    println("my endian is little_endian?? ", little_endian, "\nmy_endian = ", my_endian)

    img = HdrImage(3, 2)
    set_pixel!(img, 1, 1, RayTracer.ColorTypes.RGB{Float32}(1.0e1, 2.0e1, 3.0e1))
    set_pixel!(img, 2, 1, RayTracer.ColorTypes.RGB{Float32}(4.0e1, 5.0e1, 6.0e1))
    set_pixel!(img, 3, 1, RayTracer.ColorTypes.RGB{Float32}(7.0e1, 8.0e1, 9.0e1))
    set_pixel!(img, 1, 2, RayTracer.ColorTypes.RGB{Float32}(1.0e2, 2.0e2, 3.0e2))
    set_pixel!(img, 2, 2, RayTracer.ColorTypes.RGB{Float32}(4.0e2, 5.0e2, 6.0e2))
    set_pixel!(img, 3, 2, RayTracer.ColorTypes.RGB{Float32}(7.0e2, 8.0e2, 9.0e2))

    println(img)
    buf = IOBuffer()
    RayTracer.write(buf, img, endianness = my_endian)
    contents = take!(buf)
    println(
        "Specifying right endian\ncontents == LE_REFERENCE_BYTES: ",
        (contents == LE_REFERENCE_BYTES),
    )
    buf1 = IOBuffer()
    write(buf1, img)
    contents = take!(buf1)
    println(
        "\nNo endianness specified\ncontents == LE_REFERENCE_BYTES: ",
        (contents == LE_REFERENCE_BYTES),
    )
    buf2 = IOBuffer()
    RayTracer.write(buf2, img; endianness = 1.0)
    contents = take!(buf2)
    println(
        "\nSpecifying big endian (wrong reference)\ncontents == LE_REFERENCE_BYTES: ",
        (contents == LE_REFERENCE_BYTES),
    )
    buf3 = IOBuffer()
    RayTracer.write(buf3, img; endianness = 1.0)
    contents = take!(buf3)
    println(
        "\nSpecifying big endian (correct reference)\ncontents == BE_REFERENCE_BYTES: ",
        (contents == BE_REFERENCE_BYTES),
    )
    println("\n")
    buf4 = IOBuffer()
    RayTracer.write(buf4, img; endianness = 0)
    buf5 = IOBuffer()
    RayTracer.write(buf5, img; endianness = 0)
end

main()
